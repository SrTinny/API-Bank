/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Trabalho1;

import javax.swing.JOptionPane;

/**
 *
 * @author João Victor
 */
public class Operacoes extends javax.swing.JFrame {

    /**
     * Creates new form Operacoes
     */
    public Operacoes() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btSaque = new javax.swing.JButton();
        btTrans = new javax.swing.JButton();
        btSaldos = new javax.swing.JButton();
        btDepositar = new javax.swing.JButton();
        btReajuste = new javax.swing.JButton();
        btSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Selecione a operação desejada");

        btSaque.setText("Saque");
        btSaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaqueActionPerformed(evt);
            }
        });

        btTrans.setText("Transferência");
        btTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTransActionPerformed(evt);
            }
        });

        btSaldos.setText("Ver saldos");
        btSaldos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaldosActionPerformed(evt);
            }
        });

        btDepositar.setText("Depósito");
        btDepositar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDepositarActionPerformed(evt);
            }
        });

        btReajuste.setText("Reajustar");
        btReajuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReajusteActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btTrans)
                            .addComponent(btSaldos, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btReajuste, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(btSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btSaque, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btDepositar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(89, 89, 89))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSaque)
                    .addComponent(btDepositar))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btTrans)
                    .addComponent(btReajuste))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSaldos)
                    .addComponent(btSair))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaqueActionPerformed

        String x = JOptionPane.showInputDialog(null, "Informe o número da conta: ");
        int verificar = Integer.parseInt(x);
        String y = JOptionPane.showInputDialog(null, "Informe o valor do saque: ");
        int valor = Integer.parseInt(y);

        //sacar conta 1
        if (verificar == Principal.conta1.getNumero()) {
            if (Principal.conta1.getSaldo() > valor) {
                int i = JOptionPane.showConfirmDialog(null, Principal.conta1.getNome() + ", Deseja realmente realizar o saque?");
                if (i == 0) {
                    Principal.conta1.sacar(valor);
                    JOptionPane.showMessageDialog(null, "Saque realizado com sucesso! \n"
                            + "seu saldo atual é de:" + Principal.conta1.getSaldo());
                } else {
                    JOptionPane.showMessageDialog(null, "Saque Cancelado! ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Saldo Insulficiente! ");
            }
        } //sacar conta 2
        else if (verificar == Principal.conta2.getNumero()) {
            if (Principal.conta2.getSaldo() >= valor) {
                int i = JOptionPane.showConfirmDialog(null, Principal.conta2.getNome() + ", Deseja realmente realizar o saque?");
                if (i == 0) {
                    Principal.conta2.sacar(valor);
                    JOptionPane.showMessageDialog(null, "Saque realizado com sucesso! \n"
                            + "seu saldo atual é de:" + Principal.conta2.getSaldo());
                } else {
                    JOptionPane.showMessageDialog(null, "Saque Cancelado! ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Saldo Insulficiente! ");
            }
        } //sacar conta3
        else if (verificar == Principal.conta3.getNumero()) {
            if (Principal.conta3.getSaldo() > valor) {
                int i = JOptionPane.showConfirmDialog(null, Principal.conta3.getNome() + ", Deseja realmente realizar o saque?");
                if (i == 0) {
                    Principal.conta3.sacar(valor);
                    JOptionPane.showMessageDialog(null, "Saque realizado com sucesso! \n"
                            + "seu saldo atual é de: " + Principal.conta3.getSaldo());
                } else {
                    JOptionPane.showMessageDialog(null, "Saque Cancelado! ");
                }
            } else if ((Principal.conta3.getSaldo() + Principal.conta3.limite) > valor) {
                int i = JOptionPane.showConfirmDialog(null, Principal.conta3.getNome() + ", Deseja realmente realizar o saque?");
                if (i == 0) {
                    Principal.conta3.descontar(Principal.conta3.multa);
                    Principal.conta3.sacar(valor);
                    JOptionPane.showMessageDialog(null, "Saque efetuado usando cheque especial! \n"
                            + "seu saldo atual é de: " + Principal.conta3.getSaldo()
                            + ", já com o desconto da multa."); //tem um erro aq
                } else {
                    JOptionPane.showMessageDialog(null, "Saque Cancelado! ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Saldo Insulficiente! ");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Conta inexistente! ");
        }
    }//GEN-LAST:event_btSaqueActionPerformed

    private void btDepositarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDepositarActionPerformed

        String x = JOptionPane.showInputDialog(null, "Informe o número da conta: ");
        int verificar = Integer.parseInt(x);
        String y = JOptionPane.showInputDialog(null, "Informe o valor do Depósito: ");
        int valor = Integer.parseInt(y);

        if (verificar == Principal.conta1.getNumero()) {
            int i = JOptionPane.showConfirmDialog(null, Principal.conta1.getNome() + ", Deseja realmente realizar o Depósito? ");
            if (i == 0) {
                Principal.conta1.depositar(valor);
                JOptionPane.showMessageDialog(null, "Depósito realizado com sucesso! \n"
                        + "seu saldo atual é de:" + Principal.conta1.getSaldo());
            } else {
                JOptionPane.showMessageDialog(null, "Depósito Cancelado! ");
            }
        } else if (verificar == Principal.conta2.getNumero()) {
            int i = JOptionPane.showConfirmDialog(null, Principal.conta2.getNome() + ", Deseja realmente realizar o Depósito? ");
            if (i == 0) {
                Principal.conta2.depositar(valor);
                JOptionPane.showMessageDialog(null, "Depósito realizado com sucesso! \n"
                        + "seu saldo atual é de:" + Principal.conta2.getSaldo());
            } else {
                JOptionPane.showMessageDialog(null, "Depósito Cancelado! ");
            }
        } else if (verificar == Principal.conta3.getNumero()) {
            int i = JOptionPane.showConfirmDialog(null, Principal.conta3.getNome() + ", Deseja realmente realizar o Depósito? ");
            if (i == 0) {
                Principal.conta3.depositar(valor);
                JOptionPane.showMessageDialog(null, "Depósito realizado com sucesso! \n"
                        + "seu saldo atual é de:" + Principal.conta3.getSaldo());
            } else {
                JOptionPane.showMessageDialog(null, "Depósito Cancelado! ");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Conta inexistente! ");
        }
    }//GEN-LAST:event_btDepositarActionPerformed

    private void btReajusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReajusteActionPerformed

        String y = JOptionPane.showInputDialog(null, "Informe o número da conta: ");
        String x = JOptionPane.showInputDialog(null, "Informe qual a taxa de reajuste: ");

        int verificar = Integer.parseInt(y);

        if (verificar == Principal.conta2.getNumero()) {
            int i = JOptionPane.showConfirmDialog(null, Principal.conta2.getNome() + ", Deseja realmente realizar o reajuste? ");
            if (i == 0) {
                if (x == null || x.trim().equals("")) {
                    Principal.conta2.reajustar();
                    JOptionPane.showMessageDialog(null, "Reajuste realizado com sucesso!");
                } else {
                    int taxa = Integer.parseInt(x);
                    Principal.conta2.reajustar(taxa);
                    JOptionPane.showMessageDialog(null, "Reajuste realizado com sucesso!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Reajuste cancelado! ");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Conta inexistente! ");
        }
    }//GEN-LAST:event_btReajusteActionPerformed

    private void btSaldosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaldosActionPerformed
        JOptionPane.showMessageDialog(null, "SALDOS: \n"
                + "- CONTA COMUM -\n" + Principal.conta1.getNome()
                + ", Saldo: " + Principal.conta1.getSaldo() + "\n"
                + "- CONTA POUPANÇA -\n" + Principal.conta2.getNome()
                + ", Saldo: " + Principal.conta2.getSaldo() + "\n"
                + "- CONTA ESPECIAL -\n" + Principal.conta3.getNome()
                + ", Saldo: " + Principal.conta3.getSaldo());

    }//GEN-LAST:event_btSaldosActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btSairActionPerformed

    private void btTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTransActionPerformed

        String x = JOptionPane.showInputDialog(null, "Informe de qual conta deseja trasferir: ");
        int conta1 = Integer.parseInt(x);

        String y = JOptionPane.showInputDialog(null, "Informe para qual conta deseja trasferir: ");
        int conta2 = Integer.parseInt(y);

        String z = JOptionPane.showInputDialog(null, "Informe o valor da transferência: ");
        int valor = Integer.parseInt(z);

        //conta 1 para conta 2
        if (Principal.conta1.getNumero() == conta1 && Principal.conta2.getNumero() == conta2) {
            int i = JOptionPane.showConfirmDialog(null, "Deseja realmente realizar a transferência? ");
            if (i == 0) {
                if (Principal.conta1.getSaldo() > valor) {
                    Principal.conta1.transferir(conta1, conta2, valor);
                    Principal.conta2.setSaldo(Principal.conta2.getSaldo() + valor);
                    JOptionPane.showMessageDialog(null, "Transferência realizada! ");
                } else {
                    JOptionPane.showMessageDialog(null, "Saldo insulficiente ! ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Transferência cancelada! ");
            }
        } //conta 1 para conta 3
        else if (Principal.conta1.getNumero() == conta1 && Principal.conta3.getNumero() == conta2) {
            int i = JOptionPane.showConfirmDialog(null, "Deseja realmente realizar a transferência? ");
            if (i == 0) {
                if (Principal.conta1.getSaldo() > valor) {
                    Principal.conta1.transferir(conta1, conta2, valor);
                    Principal.conta3.setSaldo(Principal.conta3.getSaldo() + valor);
                    JOptionPane.showMessageDialog(null, "Transferência realizada! ");
                } else {
                    JOptionPane.showMessageDialog(null, "Saldo insulficiente ! ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Transferência cancelada! ");
            }
        } //conta 2 para conta 1
        else if (Principal.conta2.getNumero() == conta1 && Principal.conta1.getNumero() == conta2) {
            int i = JOptionPane.showConfirmDialog(null, "Deseja realmente realizar a transferência? ");
            if (i == 0) {
                if (Principal.conta2.getSaldo() > valor) {
                    Principal.conta2.transferir(conta1, conta2, valor);
                    Principal.conta1.setSaldo(Principal.conta1.getSaldo() + valor);
                    JOptionPane.showMessageDialog(null, "Transferência realizada! ");
                } else {
                    JOptionPane.showMessageDialog(null, "Saldo insulficiente ! ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Transferência cancelada! ");
            }
        } //conta 2 para conta 3
        else if (Principal.conta2.getNumero() == conta1 && Principal.conta3.getNumero() == conta2) {
            int i = JOptionPane.showConfirmDialog(null, "Deseja realmente realizar a transferência? ");
            if (i == 0) {
                if (Principal.conta2.getSaldo() > valor) {
                    Principal.conta2.transferir(conta1, conta2, valor);
                    Principal.conta3.setSaldo(Principal.conta3.getSaldo() + valor);
                    JOptionPane.showMessageDialog(null, "Transferência realizada! ");
                } else {
                    JOptionPane.showMessageDialog(null, "Saldo insulficiente ! ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Transferência cancelada! ");
            }
        } //conta 3 para conta 1
        else if (Principal.conta3.getNumero() == conta1 && Principal.conta1.getNumero() == conta2) {
            int i = JOptionPane.showConfirmDialog(null, "Deseja realmente realizar a transferência? ");
            if (i == 0) {
                if (Principal.conta3.getSaldo() > valor) {
                    Principal.conta3.transferir(conta1, conta2, valor);
                    Principal.conta1.setSaldo(Principal.conta1.getSaldo() + valor);
                    JOptionPane.showMessageDialog(null, "Transferência realizada! ");
                } else {
                    JOptionPane.showMessageDialog(null, "Saldo insulficiente ! ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Transferência cancelada! ");
            }
        } //conta 3 para conta 2
        else if (Principal.conta3.getNumero() == conta1 && Principal.conta2.getNumero() == conta2) {
            int i = JOptionPane.showConfirmDialog(null, "Deseja realmente realizar a transferência? ");
            if (i == 0) {
                if (Principal.conta3.getSaldo() > valor) {
                    Principal.conta3.transferir(conta1, conta2, valor);
                    Principal.conta2.setSaldo(Principal.conta2.getSaldo() + valor);
                    JOptionPane.showMessageDialog(null, "Transferência realizada! ");
                } else {
                    JOptionPane.showMessageDialog(null, "Saldo insulficiente ! ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Transferência cancelada! ");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Contas invalidas! ");
        }

    }//GEN-LAST:event_btTransActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Operacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Operacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Operacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Operacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Operacoes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDepositar;
    private javax.swing.JButton btReajuste;
    private javax.swing.JButton btSair;
    private javax.swing.JButton btSaldos;
    private javax.swing.JButton btSaque;
    private javax.swing.JButton btTrans;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
